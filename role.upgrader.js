// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
function withdraw(creep, resourceType) {
  // –ò—â–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  let targets = creep.room.find(FIND_STRUCTURES, {
    filter: (structure) => {
      return (structure.structureType == STRUCTURE_CONTAINER ||
              structure.structureType == STRUCTURE_STORAGE ||
              structure.structureType == STRUCTURE_SPAWN ||
              structure.structureType == STRUCTURE_TERMINAL) &&
              structure.store.getUsedCapacity(resourceType) > 0;
    }
  });

  if (targets.length > 0) {
    // –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ—Å—Ç–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if (creep.withdraw(targets[0], resourceType) == ERR_NOT_IN_RANGE) {
      creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
      creep.say('üöö');
    }
  }
}
// –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
function upgrade(creep, controller) {
  // –ï—Å–ª–∏ –∫—Ä–∏–ø –Ω–µ —Ä—è–¥–æ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –∫ –Ω–µ–º—É
  if (creep.pos.inRangeTo(controller, 3) == false) {
    creep.moveTo(controller);
    creep.say('üö∂ Moving to controller');
    // –í—ã–≤–æ–¥–∏–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É –Ω–∞ —ç–∫—Ä–∞–Ω
    const path = creep.pos.findPathTo(controller);
    const visual = new RoomVisual(creep.room.name);
    visual.poly(path, {lineStyle: 'dashed', strokeWidth: 0.1, opacity: 0.5});
  } else {
    // –ï—Å–ª–∏ –∫—Ä–∏–ø —Ä—è–¥–æ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º, —É–ª—É—á—à–∞–µ–º –µ–≥–æ
    creep.upgradeController(controller);
    creep.say('‚ö° Upgrading');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
function findController(creep) {
  // –ò—â–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ –∫–æ–º–Ω–∞—Ç–µ
  let controller = creep.room.controller;
  if (controller) {
    return controller;
  } else {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
function run(creep) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  let controller = findController(creep);
  if (controller) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫—Ä–∏–ø–∞ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    if (creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {
      upgrade(creep, controller);
    } else {
      // –ï—Å–ª–∏ —É –∫—Ä–∏–ø–∞ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤, –∑–∞–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      resourceManager.withdraw(creep, RESOURCE_ENERGY);
    }
  } else {
    console.log('Upgrader ' + creep.name + ' cannot find controller');
  }
}

module.exports = {
  run: run
};
