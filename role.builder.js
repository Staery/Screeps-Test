// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
function withdraw(creep, resourceType) {
  // –ò—â–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  let targets = creep.room.find(FIND_STRUCTURES, {
    filter: (structure) => {
      return (structure.structureType == STRUCTURE_CONTAINER ||
              structure.structureType == STRUCTURE_STORAGE ||
              structure.structureType == STRUCTURE_SPAWN ||
              structure.structureType == STRUCTURE_TERMINAL) &&
              structure.store.getUsedCapacity(resourceType) > 0;
    }
  });

  if (targets.length > 0) {
    // –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ—Å—Ç–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if (creep.withdraw(targets[0], resourceType) == ERR_NOT_IN_RANGE) {
      creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
      creep.say('üöö');
    }
  }
}

function build(creep, target) {
  if (creep.pos.isNearTo(target) == false) {
    creep.moveTo(target);
    creep.say('üö∂ Moving to target');
    const path = creep.pos.findPathTo(target);
    const visual = new RoomVisual(creep.room.name);
    visual.poly(path, {lineStyle: 'dashed', strokeWidth: 0.1, opacity: 0.5});
  } else {
    creep.build(target);
    creep.say('üî® Building');
  }
}

function findBuildTarget(creep) {
  let targets = creep.room.find(FIND_CONSTRUCTION_SITES);
  if (targets.length > 0) {
    return targets[0];
  } else {
    return null;
  }
}

function run(creep) {
  let target = findBuildTarget(creep);
  if (target) {
    if (creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0){
      build(creep, target);
    } else {
      resourceManager.withdraw(creep, RESOURCE_ENERGY);
    }
    
    
  } else {
    console.log('Builder ' + creep.name + ' cannot find e');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
module.exports = {
  run: run
};